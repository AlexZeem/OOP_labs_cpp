1. Написать функцию int substr(char *string1, char *string2) , которая возвращает индекс элемента в строке string1, с которого начинается подстрока, равная string2.

2. Написать функцию char* compact(char *string), которая выполняет процедуру "сжатия" исходной последовательности символов string : каждая подпоследовательность из вхождений одного и того же символа, заменяется на текст x(k), где x - символ, а k - число его вхождений.

3. Написать функцию int subseq(char *string1, char *string2), которая возвращает длину наибольшей общей подпоследовательности символов строк string1 и string2. Например, subseq ("доцент", "студент") = = 3.

4. Написать функцию char addword(char *word, char *arr, int size). В массиве символов arr записаны слова, разделенные символом '\0'. Фнкция проверяет есть ли слово, word в массиве; если нет - записывает его в конец массива. Функция должна следить за переполнением массива. Возвращаемый результат: -1 – переполнение массива ; 0 – слово уже есть в масииве; 1 – слово добавлено.

5. Написать функцию char* sort(char **strings, int size). Функция получает в качестве параметра указатель на массив из указателей типа char *, каждый из которых ссылается на строку. Функция "упорядочивает" строки в лексикографическом порядке, переставляя не строки а указатели на них.
Для сравнения строк использовать функцию:
int strcmp( const char *string1, const char *string2 );// <string.h>;
Return Value
The return value this function indicates the lexicographic relation of string1 to string2.
Value Relationship of string1 to string2
< 0 string1 less than string2
0 string1 identical to string2
> 0 string1 greater than string2

6. Написать функцию bool ispal(char *string), которая возвращает 1, если string является палиндромом и 0 – в противном случае. Палиндромом называется последовательность символов, которая выглядит одинаково будучи прочтенной как справа налево, так и наоборот. Например, "123X321" или "abccba".

7. Написать функцию char* makepal(char *), которая получает в качестве параметра строку символов, преобразует ее в палиндром добавляя к ней наименьшее число символов и возвращает указатель на него.

8. Написать функцию double* txt2double(char * , int *size). Первый параметр – указатель на строку, в которой размещены числа, разделенные символом ";" , например, "1123.45;13;3.14". Функция txt2double() размещает эти числа в динамическом массиве и возвращает указатель на него. Параметр size принимает значение, равное длине массива в случае удачного завершения функции и 0 – в противном случае (т.е. если хотябы одно из чисел в строке невозможно корректно преобразовать – ("1123.45;Sb3;3.14").
Для преобразования воспользоваться функцией:
double atof( const char *string ); // <stdlib.h>;
Return Value
Function returns the double value produced by interpreting the input characters as a number. The return value is 0.0 if the input cannot be converted to a value of that type. The return value is undefined in case of overflow.
Для выделения чисел из исходной строки воспользоваться функцией:
char *strstr( const char *string1, const char *string2 ); // <string.h>;
Return Value
Function returns a pointer to the first occurrence of string2 in string1, or NULL if string2 does not appear in string1. If string2 points to a string of zero length, the function returns string1.

Результаты работы оформить в виде одного или нескольких проектов Си-программ, включающих по три файла:
1. Header-файла, содержащего прототипы функций, например <mystring.h>;.
2. Файла с определениями функций, например <mystring.с>;.
3. Файла тест-драйва, демонстрирующего работоспособность функций, например <stringtest.c>;.
Каждый из проектов может включать "родственные" функции, например строковые или для работы с палиндромами.